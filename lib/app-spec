#!/bin/bash

declare -A OPTIONS
declare SPEC


APPSPEC.read() {
    JSON.load "$(< $1)" SPEC
}

APPSPEC.run() {
    local abstract
    abstract=$(JSON.get -s '/abstract' SPEC)
    local class=$(JSON.get -s '/class' SPEC)
#    echo $abstract

    local options
    options=$(JSON.object '/options' SPEC)
    declare -A OPTION_SPEC
    declare -A OPTION_ALIASES

    APPSPEC.options-to-spec

    local subcommands
    subcommands=$(JSON.object '/subcommands' SPEC);
#    echo "$subcommands"

    local subcmdnames=($(JSON.keys '/' subcommands))
#    echo "${subcmdnames[@]}"

    local op
    local arg
#    for arg in "$@"; do
    while [[ -n "$@" ]]; do
        local arg=$1
        echo "arg=$arg"

        if [[ $arg =~ ^- ]]; then

            local optname
            if [[ $arg =~ ^--(.*) ]]; then
                optname=${BASH_REMATCH[1]}
                local type=${OPTION_SPEC["$optname"]}
                if [[ -z $type ]]; then
                    echo "Unknown option '$optname'" >&2
                    exit 2
                fi
                if [[ $type == "flag" ]]; then
                    OPTIONS["$optname"]=1
                else
                    shift
                    if [[ -z "$1" ]]; then
                        echo "Option '$optname' needs a value" >&2
                        exit 2
                    fi
                    OPTIONS["$optname"]="$1"
                fi

            elif [[ $arg =~ ^-(.*) ]]; then
                local short=${BASH_REMATCH[1]}
                for (( i=0; i < ${#short}; i++ )); do
                    local alias="${short:$i:1}"
                    optname=${OPTION_ALIASES["$alias"]}
                    local type=${OPTION_SPEC["$optname"]}
                    if [[ -z $optname ]]; then
                        echo "Option '$alias' unknown"
                        exit 2;
                    fi
                    echo "ALIAS $alias -> $optname"

                    if [[ $type == "flag" ]]; then
                        OPTIONS["$optname"]=1
                    else
                        shift
                        if [[ -z "$1" ]]; then
                            echo "Option '$optname' needs a value" >&2
                            exit 2
                        fi
                        OPTIONS["$optname"]="$1"
                    fi

                done

            fi
            if [[ -z $optname ]]; then
                echo "Error arg='$arg'"
                exit 2;
            fi

        else
            for possible_cmd in "${subcmdnames[@]}"; do

                if [[ $possible_cmd == "$arg" ]]; then
                    command="$possible_cmd"
                    cmd_spec=$(JSON.object "/$command" subcommands)
                    subcommands=$(JSON.object '/subcommands' cmd_spec)
                    subcmdnames=($(JSON.keys '/' subcommands))
                    local try=$(JSON.get '/op' cmd_spec)
                    if [[ -n $try ]]; then
                        op=$(JSON.get -s '/op' cmd_spec)
                    fi
                    echo "op=$op"

                    options=$(JSON.object '/options' cmd_spec)
                    APPSPEC.options-to-spec

                fi
            done

        fi
        shift

    done

    if [[ -z $op ]]; then
        echo "Error, no op found" >&2
        exit 255
    fi

    if [[ -n $op ]]; then
        "$class.$op" "$@"
    fi
}

APPSPEC.options-to-spec() {
    for i in $(JSON.keys '/' options); do
#        echo "option $option"
        local option=$(JSON.object "/$i" options)
        local name=$(JSON.get -s '/name' option)
        local opttype=$(JSON.get -s '/type' option)
        local aliases=$(JSON.object '/aliases' option)
        if [[ -n "$aliases" ]]; then
            local keys=$(JSON.keys '/' aliases)
            for i in $keys; do
                local alias=$(JSON.get -s "/$i" aliases)
#                echo "alias '$i' = $alias"
                OPTION_ALIASES["$alias"]="$name"
            done
        fi
#        echo "option $name aliases:$aliases"
        OPTION_SPEC["$name"]="$opttype"
    done
}

